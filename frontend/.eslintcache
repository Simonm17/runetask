[{"C:\\Programming\\runetask\\frontend\\src\\components\\Register.js":"1","C:\\Programming\\runetask\\frontend\\src\\pages\\User.js":"2","C:\\Programming\\runetask\\frontend\\src\\App.js":"3","C:\\Programming\\runetask\\frontend\\src\\components\\Logout.js":"4","C:\\Programming\\runetask\\frontend\\src\\components\\DeleteTask.js":"5","C:\\Programming\\runetask\\frontend\\src\\components\\CreateTask.js":"6","C:\\Programming\\runetask\\frontend\\src\\components\\Login.js":"7","C:\\Programming\\runetask\\frontend\\src\\components\\CompleteTask.js":"8","C:\\Programming\\runetask\\frontend\\src\\components\\TwitchLogin.js":"9","C:\\Programming\\runetask\\frontend\\src\\reportWebVitals.js":"10","C:\\Programming\\runetask\\frontend\\src\\components\\EditTask.js":"11","C:\\Programming\\runetask\\frontend\\src\\index.js":"12","C:\\Programming\\runetask\\frontend\\src\\urls.js":"13"},{"size":2782,"mtime":1609203370552,"results":"14","hashOfConfig":"15"},{"size":7532,"mtime":1610684974935,"results":"16","hashOfConfig":"15"},{"size":4039,"mtime":1610841578082,"results":"17","hashOfConfig":"15"},{"size":623,"mtime":1610252255843,"results":"18","hashOfConfig":"15"},{"size":1014,"mtime":1610579681993,"results":"19","hashOfConfig":"15"},{"size":2948,"mtime":1610841710121,"results":"20","hashOfConfig":"15"},{"size":1765,"mtime":1610861571570,"results":"21","hashOfConfig":"15"},{"size":1152,"mtime":1610338187387,"results":"22","hashOfConfig":"15"},{"size":1348,"mtime":1610864742001,"results":"23","hashOfConfig":"15"},{"size":362,"mtime":1606313686305,"results":"24","hashOfConfig":"15"},{"size":2128,"mtime":1610583680119,"results":"25","hashOfConfig":"15"},{"size":500,"mtime":1606313686305,"results":"26","hashOfConfig":"15"},{"size":177,"mtime":1610841687320,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ievu0z",{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},"C:\\Programming\\runetask\\frontend\\src\\components\\Register.js",[],"C:\\Programming\\runetask\\frontend\\src\\pages\\User.js",["62","63"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\nimport CreateTask from '../components/CreateTask';\r\nimport EditTask from '../components/EditTask';\r\nimport DeleteTask from '../components/DeleteTask';\r\nimport CompleteTask from '../components/CompleteTask';\r\nimport { motion } from 'framer-motion';\r\nimport { AnimateSharedLayout } from \"framer-motion\"\r\n\r\n\r\n\r\nconst UserPage = ({ username, authUser }) => {\r\n\r\n    const token = localStorage.getItem('token');\r\n\r\n    const [taskUrls, setTaskUrls] = useState([]);\r\n    const [tasks, setTasks] = useState([]);\r\n\r\n    const [msg, setMsg] = useState('');\r\n    \r\n    function clearMsg(){\r\n        return setMsg('');\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (token == null) {\r\n            setMsg('');\r\n        }\r\n    }, [authUser]);\r\n\r\n    // used for triggering getUserAPI() after CUD requests.\r\n    const [toggle, setToggle] = useState(true);\r\n    const triggerToggle = () => {\r\n        setToggle(!toggle);\r\n    }\r\n\r\n    // for framer-motion animation for delete buttons\r\n    const [selectedBtn, setSelectedBtn] = useState('');\r\n\r\n    // for resetting state after canceling or deleting task/edits\r\n    function triggerSelectedBtn() {\r\n        setSelectedBtn('');\r\n    }\r\n\r\n    // FRAMER ANIMATION STUFF HERE\r\n    const variants = {\r\n        hidden: {scale: 0},\r\n        visible: {scale: 1},\r\n\r\n    }\r\n\r\n    const getTaskInfo = tasks.map( task => {\r\n            if (token && authUser === username.match.params.user) {\r\n                return <li key={tasks.indexOf(task)}>\r\n                    <EditTask completed={task.completed} setMsg={setMsg} taskUrl={task.url} description={task.description} triggerToggle={triggerToggle}/> \r\n                    <motion.div className=\"button-container\">\r\n                        <CompleteTask taskUrl={task.url} taskStatus={task.completed} triggerToggle={triggerToggle}/>\r\n                        <AnimateSharedLayout>\r\n                            <motion.button\r\n                                variants={variants}\r\n                                initial=\"visible\"\r\n                                animate={{ scale: selectedBtn === tasks.indexOf(task) ? '0' : '1'}}\r\n                                onClick={() => setSelectedBtn(tasks.indexOf(task))}\r\n                            >&times;</motion.button>\r\n                            {selectedBtn === tasks.indexOf(task) &&\r\n                                <motion.div\r\n                                    className=\"confirm-cancel-div\"\r\n                                    variants={variants}\r\n                                    initial={{ scale: 0, x: -45}}\r\n                                    animate={{ scale: selectedBtn === tasks.indexOf(task)? '1' : '0'}}\r\n                                    transition={{ ease: \"easeOut\", duration: 5 }}\r\n                                >\r\n                                    <DeleteTask setMsg={setMsg} taskUrl={task.url} triggerToggle={triggerToggle} setSelectedBtn={setSelectedBtn}/>\r\n                                    <motion.button onClick={triggerSelectedBtn}>cancel</motion.button>\r\n                                </motion.div>\r\n                            }\r\n                        </AnimateSharedLayout>\r\n                    </motion.div>\r\n                </li> \r\n            }\r\n            else {\r\n                return (\r\n                    <>\r\n                        {task.completed ?\r\n                            <li style={{textDecoration: 'line-through'}} key={tasks.indexOf(task)}>\r\n                            {task.description}\r\n                            </li>\r\n                            :\r\n                            <li key={tasks.indexOf(task)}>\r\n                                {task.description}\r\n                            </li>\r\n                        }\r\n                    </>\r\n                )\r\n            }\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n        const getUserAPI = () => {\r\n            axios.get(`http://localhost:8000/users/` + username.match.params.user)\r\n            .then(res => {\r\n                setTaskUrls(res.data.tasks);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        };\r\n        getUserAPI();\r\n    }, [toggle]);\r\n\r\n    useEffect(() => {\r\n        // Initialize with empty array so array doesn't\r\n        // merge on top of already added states when using setTasks.\r\n        console.log(`UseEffect triggered by taskUrls.`);\r\n        setTasks([]);\r\n        for (let i = 0; i < taskUrls.length; i++){\r\n            axios.get(taskUrls[i])\r\n            .then( res => {\r\n                console.log('PRINTING:');\r\n                console.log(res.data);\r\n                setTasks(prevTask => [...prevTask, res.data]);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        }\r\n    // only triggered when change in returned urls array by GET for users list.\r\n    }, [taskUrls]);\r\n\r\n    return (\r\n        <User>\r\n            {username.match.params.user &&\r\n                <h1>{username.match.params.user}'s tasks</h1>\r\n            }\r\n            {msg && \r\n                <Messages>\r\n                    <p className=\"msg-text\">{msg} <span onClick={clearMsg}>&times;</span></p>\r\n                </Messages>\r\n            }\r\n            {token && authUser === username.match.params.user && \r\n                <CreateTask setMsg={setMsg} triggerToggle={triggerToggle}/>\r\n            }\r\n            {tasks.length > 0 ?\r\n                <TaskList>{getTaskInfo}</TaskList>\r\n                :\r\n                <p>{token && authUser === username.match.params.user ?\r\n                    'You have no tasks!' : `${username.match.params.user} currently has no task.`\r\n                    }\r\n                </p>\r\n            }\r\n        </User>\r\n    )\r\n}\r\n\r\nconst TaskList = styled.ul`\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    overflow-x: hidden;\r\n    max-width: 80%;\r\n    margin: auto;\r\n    list-style: none;\r\n    padding-inline-start: 0;\r\n    li {\r\n        border: 0;\r\n        outline: 0;\r\n        font-size: 16px;\r\n        margin: 10px auto;\r\n        padding: 16px;\r\n        background-color: #6441a5;\r\n        box-shadow: -5px -5px 20px #6441a5,  5px 5px 20px #523687;\r\n        transition: all 0.2s ease-in-out;\r\n        display: flex;\r\n        flex-flow: row wrap;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        .button-container {\r\n            display: flex;\r\n        }\r\n        .confirm-cancel-div {\r\n            display: flex;\r\n            flex-flow: row nowrap;\r\n        }\r\n    }\r\n`;\r\n\r\nconst User = styled.div`\r\n    h1 {\r\n        text-align: center;\r\n    }\r\n    button {\r\n        border: 0;\r\n        border-radius: 10px;\r\n        font-weight: bold;\r\n        outline: 0;\r\n        font-size: 16px;\r\n        margin: 6px 3px;\r\n        padding: 10px 15px;\r\n        background-color: #6441a5;\r\n        box-shadow:-5px -5px 20px #6441a5,  5px 5px 20px #523687;\r\n        transition: all 0.2s ease-in-out;\r\n        &:hover {\r\n            box-shadow: -2px -2px 5px #6441a5, 2px 2px 5px #523687;\r\n        }\r\n        &:active {\r\n            box-shadow: inset 1px 1px 2px #523687, inset -1px -1px 2px #6441a5;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Messages = styled.div`\r\n    .msg-text {\r\n        display: inline-block;\r\n        margin-left: 15vw;\r\n        span {\r\n            &:hover {\r\n                cursor: pointer;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default UserPage;","C:\\Programming\\runetask\\frontend\\src\\App.js",["64"],"C:\\Programming\\runetask\\frontend\\src\\components\\Logout.js",["65"],"import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSignOutAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Logout = ({ setToken, setMessage, setAuthUser }) => {\r\n    \r\n    const handleLogoutClick = () => {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n        setToken(null);\r\n        setMessage([`You have logged out.`]);\r\n        setAuthUser('');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <a onClick={handleLogoutClick}><FontAwesomeIcon icon={faSignOutAlt} /></a>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Logout;","C:\\Programming\\runetask\\frontend\\src\\components\\DeleteTask.js",[],"C:\\Programming\\runetask\\frontend\\src\\components\\CreateTask.js",["66"],"import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { baseBackendUrl } from '../urls';\r\n\r\nconst CreateTask = ({ triggerToggle, setMsg }) => {\r\n\r\n    const [value, setValue] = useState('');\r\n\r\n    const token = localStorage.getItem('token');\r\n    const config = {\r\n        method: 'post',\r\n        url: 'http://localhost:8000/tasks/',\r\n        headers: {\r\n            Authorization: 'Token ' + token\r\n        },\r\n        data: {\r\n            'description': value,\r\n            'created_by': '1'\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (value !== '') {\r\n            return axios(config)\r\n            .then(res => {\r\n                console.log(JSON.stringify(res.data));\r\n                triggerToggle();\r\n                setMsg('task created!');\r\n                setValue('');\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n        }\r\n        return (\r\n            setMsg('You must type at least one character.')\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                placeholder=\"Add new task\"\r\n                onChange={e => setValue(e.target.value)} \r\n                value={value}\r\n            />\r\n            <button type=\"submit\"><FontAwesomeIcon icon={faPlus} /> Create</button>\r\n        </Form>\r\n    );\r\n}\r\n\r\n// form styling inspired by https://codepen.io/swapnet/pen/QWwPVwE\r\nconst Form = styled.form`\r\n    font-family: 'Montserrat', sans-serif;\r\n    font-size: 16px;\r\n    letter-spacing: -0.2px;\r\n    margin: auto;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    button, input {\r\n        border: 0;\r\n        outline: 0;\r\n        font-size: 16px;\r\n        margin: 12px;\r\n        padding: 16px;\r\n        background-color: #6441a5;\r\n    }\r\n    input {\r\n        border-radius: 35px;\r\n        box-shadow:  inset 2px 2px 5px #523687, inset -5px -5px 10px #6441a5;\r\n        box-sizing: border-box;\r\n        transition: all 0.2s ease-in-out;\r\n        appearance: none;\r\n        -webkit-appearance: none;\r\n        &:focus {\r\n            box-shadow: inset 1px 1px 2px #523687, inset -1px -1px 2px #6441a5;\r\n        }\r\n    }\r\n    button {\r\n        color: #131211;\r\n        border-radius: 9px;\r\n        font-weight: bold;\r\n        box-shadow: -5px -5px 20px #6441a5,  5px 5px 20px #523687;\r\n        transition: all 0.2s ease-in-out;\r\n        cursor: pointer;\r\n        font-weight: 600;\r\n        &:hover {\r\n            box-shadow: -2px -2px 5px #6441a5, 2px 2px 5px #523687;\r\n        }\r\n        &:active {\r\n            box-shadow: inset 1px 1px 2px #523687, inset -1px -1px 2px #6441a5;\r\n        }\r\n    }\r\n`\r\n\r\nexport default CreateTask;","C:\\Programming\\runetask\\frontend\\src\\components\\Login.js",["67","68","69","70"],"C:\\Programming\\runetask\\frontend\\src\\components\\CompleteTask.js",["71"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst CompleteTask = ({taskUrl, taskStatus, triggerToggle}) => {\r\n\r\n    const token = localStorage.getItem('token');\r\n\r\n    const config = {\r\n        method: 'put',\r\n        url: taskUrl,\r\n        headers: {\r\n            Authorization: 'Token ' + token \r\n        },\r\n        data: {\r\n            'completed': !taskStatus\r\n        }\r\n    }\r\n\r\n    const buttonStyle = {\r\n        textDecoration: 'line-through',\r\n    }\r\n\r\n    const handleComplete = () => {\r\n        return axios(config)\r\n            .then(res => {\r\n                console.log(JSON.stringify(res.data));\r\n                triggerToggle();\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {taskStatus?\r\n                <CompleteButton onClick={handleComplete}>!</CompleteButton>\r\n                :\r\n                <CompleteButton onClick={handleComplete}>✓</CompleteButton>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst CompleteButton = styled.button`\r\n\r\n`;\r\n\r\nexport default CompleteTask;",["72","73"],"C:\\Programming\\runetask\\frontend\\src\\components\\TwitchLogin.js",["74","75"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { baseBackendUrl } from '../urls';\r\n\r\n\r\nconst TwitchLogin = ({ params, setToken, setMessage }) => {\r\n\r\n    // used for redirecting back to homepage after successful login\r\n    const history = useHistory();\r\n\r\n    // slices and returns code for backend code submission\r\n    const accessCode = params.location.pathname.slice(13, 43);\r\n\r\n    // used for POST request parameter in submitCode\r\n    const codeParams = {\r\n        'code': accessCode\r\n    }\r\n\r\n    // make POST request to backend with access code,\r\n    // get back key for auth, store in localStorage.\r\n    const submitCode = async () => {\r\n        setMessage(['Logging in with twitch...']);\r\n        await axios.post(`${baseBackendUrl}/twitch/connect/`, codeParams)\r\n        .then(res => {\r\n            console.log('putting token into locaStorage..');\r\n            let token = localStorage.setItem('token', res.data.key);\r\n            setToken(token);\r\n            setMessage(['Logged in successfully with Twitch!']);\r\n            history.push('/');\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    useEffect(() => {\r\n        submitCode();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TwitchLogin;","C:\\Programming\\runetask\\frontend\\src\\reportWebVitals.js",[],"C:\\Programming\\runetask\\frontend\\src\\components\\EditTask.js",["76"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\n\r\nconst EditTask = ({ taskUrl, description, triggerToggle, setMsg, completed }) => {\r\n\r\n    const [desc, setDesc] = useState(description);\r\n\r\n    const token = localStorage.getItem('token');\r\n    const config = {\r\n        method: 'put',\r\n        url: taskUrl,\r\n        headers: {\r\n            Authorization: 'Token ' + token\r\n        },\r\n        data: {\r\n            'description': desc\r\n        }\r\n    }\r\n\r\n    const keyPressHandler = (e) => {\r\n        if (token && e.key === 'Enter' && e.target.value.length > 0) {\r\n            e.preventDefault();\r\n            return axios(config)\r\n            .then(res => {\r\n                console.log(JSON.stringify(res.data));\r\n                setMsg('saved!');\r\n                triggerToggle();\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n        } else if (token && e.key === 'Enter' && e.target.value.length === 0) {\r\n            return setMsg('You must type at least one character.')\r\n        }\r\n        return console.log(` another key was pressed.`)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { completed ?\r\n            <CompletedTask style={{ textDecoration: 'line-through' }}>{desc}</CompletedTask>\r\n            :\r\n            <Input completed={completed} type=\"text\" value={desc} onChange={e => setDesc(e.target.value)} onKeyPress={keyPressHandler}/>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst CompletedTask = styled.p`\r\n    outline: 0;\r\n    border: 0;\r\n    border-radius: 5px;\r\n    height: 25px;\r\n    background-color: #6441a5;\r\n    padding: 4px;\r\n    margin: 0 5px;\r\n    min-width: 169px;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    outline: 0;\r\n    border: 0;\r\n    border-radius: 5px;\r\n    height: 25px;\r\n    background-color: #6441a5;\r\n    padding: 4px;\r\n    margin: 0 5px;\r\n    &:focus {\r\n        box-shadow: inset 2px 2px 5px #523687, inset -5px -5px 10px #6441a5;\r\n    }\r\n    ${({ completed }) => \r\n        completed && `text-decoration: line-through;`\r\n    }\r\n`;\r\n\r\nexport default EditTask;","C:\\Programming\\runetask\\frontend\\src\\index.js",[],"C:\\Programming\\runetask\\frontend\\src\\urls.js",["77"],"import CreateTask from \"./components/CreateTask\";\r\n\r\nexport const baseBackendUrl = 'http://localhost:8000'; \r\n\r\n// Files using baseBackendUrl:\r\n// - App.js\r\n\r\n// - CreateTask.js",{"ruleId":"78","severity":1,"message":"79","line":30,"column":8,"nodeType":"80","endLine":30,"endColumn":18,"suggestions":"81"},{"ruleId":"78","severity":1,"message":"82","line":111,"column":8,"nodeType":"80","endLine":111,"endColumn":16,"suggestions":"83"},{"ruleId":"78","severity":1,"message":"84","line":52,"column":6,"nodeType":"80","endLine":52,"endColumn":13,"suggestions":"85"},{"ruleId":"86","severity":1,"message":"87","line":17,"column":13,"nodeType":"88","endLine":17,"endColumn":44},{"ruleId":"89","severity":1,"message":"90","line":6,"column":10,"nodeType":"91","messageId":"92","endLine":6,"endColumn":24},{"ruleId":"89","severity":1,"message":"93","line":11,"column":22,"nodeType":"91","messageId":"92","endLine":11,"endColumn":33},{"ruleId":"89","severity":1,"message":"94","line":12,"column":22,"nodeType":"91","messageId":"92","endLine":12,"endColumn":33},{"ruleId":"89","severity":1,"message":"95","line":14,"column":11,"nodeType":"91","messageId":"92","endLine":14,"endColumn":28},{"ruleId":"89","severity":1,"message":"96","line":29,"column":17,"nodeType":"91","messageId":"92","endLine":29,"endColumn":25},{"ruleId":"89","severity":1,"message":"97","line":21,"column":11,"nodeType":"91","messageId":"92","endLine":21,"endColumn":22},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"89","severity":1,"message":"102","line":1,"column":17,"nodeType":"91","messageId":"92","endLine":1,"endColumn":25},{"ruleId":"78","severity":1,"message":"103","line":37,"column":8,"nodeType":"80","endLine":37,"endColumn":10,"suggestions":"104"},{"ruleId":"89","severity":1,"message":"105","line":1,"column":27,"nodeType":"91","messageId":"92","endLine":1,"endColumn":36},{"ruleId":"89","severity":1,"message":"106","line":1,"column":8,"nodeType":"91","messageId":"92","endLine":1,"endColumn":18},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.","ArrayExpression",["107"],"React Hook useEffect has a missing dependency: 'username.match.params.user'. Either include it or remove the dependency array.",["108"],"React Hook useEffect has a missing dependency: 'config'. Either include it or remove the dependency array.",["109"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'baseBackendUrl' is defined but never used.","Identifier","unusedVar","'setUsername' is assigned a value but never used.","'setPassword' is assigned a value but never used.","'handleLoginSubmit' is assigned a value but never used.","'authUser' is assigned a value but never used.","'buttonStyle' is assigned a value but never used.","no-native-reassign",["110"],"no-negated-in-lhs",["111"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'submitCode'. Either include it or remove the dependency array.",["112"],"'useEffect' is defined but never used.","'CreateTask' is defined but never used.",{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},"no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},"Update the dependencies array to be: [authUser, token]",{"range":"121","text":"122"},"Update the dependencies array to be: [toggle, username.match.params.user]",{"range":"123","text":"124"},"Update the dependencies array to be: [config, token]",{"range":"125","text":"126"},"Update the dependencies array to be: [submitCode]",{"range":"127","text":"128"},[836,846],"[authUser, token]",[4282,4290],"[toggle, username.match.params.user]",[1476,1483],"[config, token]",[1262,1264],"[submitCode]"]