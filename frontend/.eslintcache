[{"C:\\Programming\\runetask\\frontend\\src\\pages\\User.js":"1","C:\\Programming\\runetask\\frontend\\src\\components\\Logout.js":"2","C:\\Programming\\runetask\\frontend\\src\\components\\DeleteTask.js":"3","C:\\Programming\\runetask\\frontend\\src\\index.js":"4","C:\\Programming\\runetask\\frontend\\src\\components\\CompleteTask.js":"5","C:\\Programming\\runetask\\frontend\\src\\components\\CreateTask.js":"6","C:\\Programming\\runetask\\frontend\\src\\components\\EditTask.js":"7","C:\\Programming\\runetask\\frontend\\src\\App.js":"8","C:\\Programming\\runetask\\frontend\\src\\components\\Login.js":"9"},{"size":3672,"mtime":1609100655426,"results":"10","hashOfConfig":"11"},{"size":452,"mtime":1609096089585,"results":"12","hashOfConfig":"11"},{"size":908,"mtime":1608911475945,"results":"13","hashOfConfig":"11"},{"size":500,"mtime":1606313686305,"results":"14","hashOfConfig":"11"},{"size":1077,"mtime":1608826532143,"results":"15","hashOfConfig":"11"},{"size":1386,"mtime":1608912333612,"results":"16","hashOfConfig":"11"},{"size":1323,"mtime":1608912463112,"results":"17","hashOfConfig":"11"},{"size":1086,"mtime":1609100760985,"results":"18","hashOfConfig":"11"},{"size":1648,"mtime":1609095896719,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"ievu0z",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Programming\\runetask\\frontend\\src\\pages\\User.js",["44","45"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport CreateTask from '../components/CreateTask';\r\nimport EditTask from '../components/EditTask';\r\nimport DeleteTask from '../components/DeleteTask';\r\nimport CompleteTask from '../components/CompleteTask';\r\n\r\n\r\nconst UserPage = ({ username }) => {\r\n\r\n    const token = localStorage.getItem('token');\r\n\r\n    const [taskUrls, setTaskUrls] = useState([]);\r\n    const [tasks, setTasks] = useState([]);\r\n\r\n    const [msg, setMsg] = useState('');\r\n    \r\n    function clearMsg(){\r\n        return setMsg('');\r\n    }\r\n\r\n    // used for triggering getUserAPI() after CUD requests.\r\n    const [toggle, setToggle] = useState(true);\r\n    const triggerToggle = () => {\r\n        setToggle(!toggle);\r\n    }\r\n\r\n    // note: MAKE SURE USER IS AUTHENTICATED AND EQUALS OBJECT OWNER TO DISPLAY BUTTONS\r\n    // ✓ button is a toggle; saves Task.completed field as true or false, indicated by regular or crossed-out text.\r\n    // x button is a toggle; it brings out the confirm & cancel buttons. Once clicked, x button disappears.\r\n    // confirm button triggers Task.delete() via post request.\r\n    // cancel button resets buttons and returns x button.\r\n\r\n    const getTaskInfo = tasks.map( task => {\r\n            if (token) {\r\n                return <li key={tasks.indexOf(task)}>\r\n                    <EditTask setMsg={setMsg} taskUrl={task.url} description={task.description} triggerToggle={triggerToggle}/> \r\n                    \r\n                    <CompleteTask taskUrl={task.url} taskStatus={task.completed} triggerToggle={triggerToggle}/><button>&times;</button>\r\n                    <DeleteTask setMsg={setMsg} taskUrl={task.url} triggerToggle={triggerToggle}/><button onClick={triggerToggle}>cancel</button>\r\n                </li> \r\n            }\r\n            else {\r\n                return <li key={tasks.indexOf(task)}>\r\n                    {task.description}\r\n                </li>\r\n            }\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n        const getUserAPI = () => {\r\n            axios.get(`http://localhost:8000/users/` + username.match.params.user)\r\n            .then(res => {\r\n                setTaskUrls(res.data.tasks);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        };\r\n        getUserAPI();\r\n    }, [toggle]);\r\n\r\n    useEffect(() => {\r\n        // Initialize with empty array so array doesn't\r\n        // merge on top of already added states when using setTasks.\r\n        console.log(`UseEffect triggered by taskUrls.`);\r\n        setTasks([]);\r\n        for (let i = 0; i < taskUrls.length; i++){\r\n            axios.get(taskUrls[i])\r\n            .then( res => {\r\n                console.log('PRINTING:');\r\n                console.log(res.data);\r\n                setTasks(prevTask => [...prevTask, res.data]);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        }\r\n    // only triggered when change in returned urls array by GET for users list.\r\n    }, [taskUrls]);\r\n\r\n    return (\r\n        <div>\r\n            {token? \r\n                <CreateTask setMsg={setMsg} triggerToggle={triggerToggle}/>\r\n                :\r\n                ''\r\n            }\r\n            <h1>{username.match.params.user}'s Profile</h1>\r\n            <h1></h1>\r\n            {msg? <p>{msg} <span onClick={clearMsg}>&times;</span></p> : ''}\r\n            {tasks.length > 0 ?\r\n                <ul> {getTaskInfo} </ul>\r\n                :\r\n                <p>{token ? 'You have no tasks! Click to add.' : 'No tasks added yet.'}</p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserPage;","C:\\Programming\\runetask\\frontend\\src\\components\\Logout.js",[],"C:\\Programming\\runetask\\frontend\\src\\components\\DeleteTask.js",[],["46","47"],"C:\\Programming\\runetask\\frontend\\src\\index.js",[],["48","49"],"C:\\Programming\\runetask\\frontend\\src\\components\\CompleteTask.js",["50"],"import React from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nconst CompleteTask = ({taskUrl, taskStatus, triggerToggle}) => {\r\n\r\n    const token = localStorage.getItem('token');\r\n\r\n    const config = {\r\n        method: 'put',\r\n        url: taskUrl,\r\n        headers: {\r\n            Authorization: 'Token ' + token \r\n        },\r\n        data: {\r\n            'completed': !taskStatus\r\n        }\r\n    }\r\n\r\n    const buttonStyle = {\r\n        textDecoration: 'line-through',\r\n    }\r\n\r\n    const handleComplete = () => {\r\n        return axios(config)\r\n            .then(res => {\r\n                console.log(JSON.stringify(res.data));\r\n                triggerToggle();\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {taskStatus ? \r\n                <button style={{textDecoration: 'line-through'}} onClick={handleComplete}>✓</button>\r\n                :\r\n                <button onClick={handleComplete}>✓</button>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CompleteTask;","C:\\Programming\\runetask\\frontend\\src\\components\\CreateTask.js",[],["51","52"],"C:\\Programming\\runetask\\frontend\\src\\components\\EditTask.js",["53"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nconst EditTask = ({ taskUrl, description, triggerToggle, setMsg }) => {\r\n\r\n    const [desc, setDesc] = useState(description);\r\n\r\n    const token = localStorage.getItem('token');\r\n    const config = {\r\n        method: 'put',\r\n        url: taskUrl,\r\n        headers: {\r\n            Authorization: 'Token ' + token\r\n        },\r\n        data: {\r\n            'description': desc\r\n        }\r\n    }\r\n\r\n    const keyPressHandler = (e) => {\r\n        if (token && e.key === 'Enter' && e.target.value.length > 0) {\r\n            e.preventDefault();\r\n            return axios(config)\r\n            .then(res => {\r\n                console.log(JSON.stringify(res.data));\r\n                setMsg('saved!');\r\n                triggerToggle();\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n        } else if (token && e.key === 'Enter' && e.target.value.length === 0) {\r\n            return setMsg('You must type at least one character.')\r\n        }\r\n        return console.log(` another key was pressed.`)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input type=\"text\" value={desc} onChange={e => setDesc(e.target.value)} onKeyPress={keyPressHandler}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditTask;","C:\\Programming\\runetask\\frontend\\src\\App.js",["54","55","56"],"C:\\Programming\\runetask\\frontend\\src\\components\\Login.js",["57"],{"ruleId":"58","severity":1,"message":"59","line":63,"column":8,"nodeType":"60","endLine":63,"endColumn":16,"suggestions":"61"},{"ruleId":"62","severity":1,"message":"63","line":92,"column":13,"nodeType":"64","endLine":92,"endColumn":17},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"65","replacedBy":"69"},{"ruleId":"67","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":20,"column":11,"nodeType":"73","messageId":"74","endLine":20,"endColumn":22},{"ruleId":"65","replacedBy":"75"},{"ruleId":"67","replacedBy":"76"},{"ruleId":"71","severity":1,"message":"77","line":1,"column":27,"nodeType":"73","messageId":"74","endLine":1,"endColumn":36},{"ruleId":"71","severity":1,"message":"78","line":6,"column":3,"nodeType":"73","messageId":"74","endLine":6,"endColumn":7},{"ruleId":"71","severity":1,"message":"79","line":7,"column":3,"nodeType":"73","messageId":"74","endLine":7,"endColumn":16},{"ruleId":"71","severity":1,"message":"80","line":8,"column":3,"nodeType":"73","messageId":"74","endLine":8,"endColumn":12},{"ruleId":"71","severity":1,"message":"81","line":25,"column":17,"nodeType":"73","messageId":"74","endLine":25,"endColumn":25},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'username.match.params.user'. Either include it or remove the dependency array.","ArrayExpression",["82"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","no-native-reassign",["83"],"no-negated-in-lhs",["84"],["83"],["84"],"no-unused-vars","'buttonStyle' is assigned a value but never used.","Identifier","unusedVar",["83"],["84"],"'useEffect' is defined but never used.","'Link' is defined but never used.","'useRouteMatch' is defined but never used.","'useParams' is defined but never used.","'authUser' is assigned a value but never used.",{"desc":"85","fix":"86"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [toggle, username.match.params.user]",{"range":"87","text":"88"},[2351,2359],"[toggle, username.match.params.user]"]