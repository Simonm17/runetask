[{"C:\\Programming\\runetask\\frontend\\src\\components\\Register.js":"1","C:\\Programming\\runetask\\frontend\\src\\pages\\User.js":"2","C:\\Programming\\runetask\\frontend\\src\\App.js":"3","C:\\Programming\\runetask\\frontend\\src\\components\\Logout.js":"4","C:\\Programming\\runetask\\frontend\\src\\components\\DeleteTask.js":"5","C:\\Programming\\runetask\\frontend\\src\\components\\CreateTask.js":"6","C:\\Programming\\runetask\\frontend\\src\\components\\Login.js":"7","C:\\Programming\\runetask\\frontend\\src\\components\\CompleteTask.js":"8","C:\\Programming\\runetask\\frontend\\src\\components\\TwitchLogin.js":"9","C:\\Programming\\runetask\\frontend\\src\\reportWebVitals.js":"10","C:\\Programming\\runetask\\frontend\\src\\components\\EditTask.js":"11","C:\\Programming\\runetask\\frontend\\src\\index.js":"12"},{"size":2782,"mtime":1609203370552,"results":"13","hashOfConfig":"14"},{"size":3838,"mtime":1609963670903,"results":"15","hashOfConfig":"14"},{"size":3867,"mtime":1610053905863,"results":"16","hashOfConfig":"14"},{"size":458,"mtime":1609965173405,"results":"17","hashOfConfig":"14"},{"size":908,"mtime":1608911475945,"results":"18","hashOfConfig":"14"},{"size":1386,"mtime":1608912333612,"results":"19","hashOfConfig":"14"},{"size":1823,"mtime":1609807733999,"results":"20","hashOfConfig":"14"},{"size":1077,"mtime":1608826532143,"results":"21","hashOfConfig":"14"},{"size":1245,"mtime":1609807580835,"results":"22","hashOfConfig":"14"},{"size":362,"mtime":1606313686305,"results":"23","hashOfConfig":"14"},{"size":1323,"mtime":1608912463112,"results":"24","hashOfConfig":"14"},{"size":500,"mtime":1606313686305,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ievu0z",{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Programming\\runetask\\frontend\\src\\components\\Register.js",[],"C:\\Programming\\runetask\\frontend\\src\\pages\\User.js",["56","57"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport CreateTask from '../components/CreateTask';\r\nimport EditTask from '../components/EditTask';\r\nimport DeleteTask from '../components/DeleteTask';\r\nimport CompleteTask from '../components/CompleteTask';\r\n\r\n\r\nconst UserPage = ({ username, authUser }) => {\r\n\r\n    const token = localStorage.getItem('token');\r\n\r\n    const [taskUrls, setTaskUrls] = useState([]);\r\n    const [tasks, setTasks] = useState([]);\r\n\r\n    const [msg, setMsg] = useState('');\r\n    \r\n    function clearMsg(){\r\n        return setMsg('');\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (token == null) {\r\n            setMsg('');\r\n        }\r\n    }, [authUser]);\r\n\r\n    // used for triggering getUserAPI() after CUD requests.\r\n    const [toggle, setToggle] = useState(true);\r\n    const triggerToggle = () => {\r\n        setToggle(!toggle);\r\n    }\r\n\r\n    // note: MAKE SURE USER IS AUTHENTICATED AND EQUALS OBJECT OWNER TO DISPLAY BUTTONS\r\n    // âœ“ button is a toggle; saves Task.completed field as true or false, indicated by regular or crossed-out text.\r\n    // x button is a toggle; it brings out the confirm & cancel buttons. Once clicked, x button disappears.\r\n    // confirm button triggers Task.delete() via post request.\r\n    // cancel button resets buttons and returns x button.\r\n\r\n    const getTaskInfo = tasks.map( task => {\r\n            if (token && authUser === username.match.params.user) {\r\n                return <li key={tasks.indexOf(task)}>\r\n                    <EditTask setMsg={setMsg} taskUrl={task.url} description={task.description} triggerToggle={triggerToggle}/> \r\n\r\n                    <CompleteTask taskUrl={task.url} taskStatus={task.completed} triggerToggle={triggerToggle}/><button>&times;</button>\r\n                    <DeleteTask setMsg={setMsg} taskUrl={task.url} triggerToggle={triggerToggle}/><button onClick={triggerToggle}>cancel</button>\r\n                </li> \r\n            }\r\n            else {\r\n                return <li key={tasks.indexOf(task)}>\r\n                    {task.description}\r\n                </li>\r\n            }\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n        const getUserAPI = () => {\r\n            axios.get(`http://localhost:8000/users/` + username.match.params.user)\r\n            .then(res => {\r\n                setTaskUrls(res.data.tasks);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        };\r\n        getUserAPI();\r\n    }, [toggle]);\r\n\r\n    useEffect(() => {\r\n        // Initialize with empty array so array doesn't\r\n        // merge on top of already added states when using setTasks.\r\n        console.log(`UseEffect triggered by taskUrls.`);\r\n        setTasks([]);\r\n        for (let i = 0; i < taskUrls.length; i++){\r\n            axios.get(taskUrls[i])\r\n            .then( res => {\r\n                console.log('PRINTING:');\r\n                console.log(res.data);\r\n                setTasks(prevTask => [...prevTask, res.data]);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        }\r\n    // only triggered when change in returned urls array by GET for users list.\r\n    }, [taskUrls]);\r\n\r\n    return (\r\n        <div>\r\n            {token && authUser === username.match.params.user ? \r\n                <CreateTask setMsg={setMsg} triggerToggle={triggerToggle}/>\r\n                :\r\n                ''\r\n            }\r\n            <h1>{username.match.params.user}'s Profile</h1>\r\n            {msg? <p>{msg} <span onClick={clearMsg}>&times;</span></p> : ''}\r\n            {tasks.length > 0 ?\r\n                <ul> {getTaskInfo} </ul>\r\n                :\r\n                <p>{token ? 'You have no tasks! Click to add.' : 'No tasks added yet.'}</p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserPage;","C:\\Programming\\runetask\\frontend\\src\\App.js",["58"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  BrowserRouter,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\nimport Login from './components/Login';\r\nimport TwitchLogin from './components/TwitchLogin';\r\nimport Logout from './components/Logout';\r\nimport UserPage from './pages/User';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\n\r\n\r\nfunction App() {\r\n\r\n  const [token, setToken] = useState(null);\r\n  const [authUser, setAuthUser] = useState('');\r\n  const [message, setMessage] = useState([]);\r\n  const clearMsg = () => {\r\n    setMessage([]);\r\n  }\r\n\r\n  // returns array of messages returned to message state by API calls\r\n  const displayMsg = message.map(msg => <li key={msg.indexOf(message)}>{msg}</li>)\r\n\r\n  const checkToken = () => {\r\n    setToken(localStorage.getItem('token'));\r\n  }\r\n\r\n  const config = {\r\n    method: 'get',\r\n    url: 'http://localhost:8000/dj-rest-auth/user/',\r\n    headers: {\r\n        Authorization: 'Token ' + token \r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log(`triggering dj-rest-auth/user/ with token ${token}`);\r\n    if (token) {\r\n      axios(config)\r\n      .then(res => setAuthUser(res.data.username))\r\n      .catch(err => {\r\n        console.log(err);\r\n        console.log(`ERR token: ${token}`);\r\n      });\r\n    }\r\n  }, [token]);\r\n\r\n  useEffect(() => {\r\n    console.log(`checkToken() triggered.`)\r\n    checkToken();\r\n  }, [token, message]);\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Nav>\r\n        <Link to=\"/\">Home</Link>\r\n        {token ? \r\n          <div className=\"auth-div\">\r\n            <Link to={{\r\n              pathname: `/users/${authUser}`,\r\n              state: { fromDashboard: true }\r\n            }}>My tasks</Link>\r\n\r\n            <Logout setToken={setToken} setMessage={setMessage} setAuthUser={setAuthUser} />\r\n          </div>\r\n          :\r\n          <Login setToken={setToken} setMessage={setMessage}/>\r\n        }\r\n      </Nav>\r\n\r\n      <Message>\r\n        {message.length > 0 ?\r\n          <>\r\n            <div className=\"msg-div\">\r\n              <ul>{displayMsg}</ul>\r\n              <span onClick={clearMsg}>&times;</span>\r\n            </div>\r\n            <div className=\"clear-div\"></div>\r\n          </>\r\n          :\r\n          ''\r\n        }\r\n      </Message>\r\n      <Switch>\r\n\r\n        <Route\r\n          path=\"/twitch/:code\"\r\n          render={\r\n            locationProps => \r\n            <TwitchLogin \r\n              params={locationProps}\r\n              setMessage={setMessage}\r\n              setToken={setToken} \r\n            />\r\n          }\r\n        />\r\n\r\n        <Route\r\n          path=\"/users/:user\"\r\n          render={\r\n            routerProps =>\r\n            <UserPage\r\n              username={routerProps}\r\n              authUser={authUser}\r\n            />\r\n          } \r\n        />\r\n\r\n      </Switch>\r\n\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nconst Nav = styled.nav`\r\n  border: transparent;\r\n  border-radius: 35px;\r\n  background-color: #1b1b1b;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 0 5vw;\r\n  align-items: center;\r\n  margin: 1% 2%;\r\n  height: 10vh;\r\n  font-size: 30px;\r\n  a {\r\n    text-decoration: none;\r\n    color: #e3cac8;\r\n  }\r\n  a:hover {\r\n    /* animate underline? */\r\n    text-decoration: underline;\r\n    text-decoration-color: #e3cac8;\r\n    cursor: pointer;\r\n  }\r\n  .auth-div {\r\n    a {\r\n      margin: 0 15px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Message = styled.div`\r\n  margin: 5vh 0;\r\n  .msg-div {\r\n    color: #e3cac8;\r\n    background-color: #1b1b1b;\r\n    border: transparent;\r\n    border-radius: 35px;\r\n    margin: 0 2%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    float: left;\r\n    span {\r\n      height: auto;\r\n      padding: 0 30px;\r\n    }\r\n    span:hover {\r\n      cursor: pointer;\r\n    }\r\n  }\r\n  .clear-div {\r\n    clear: both;\r\n  }\r\n`\r\n\r\nexport default App;\r\n","C:\\Programming\\runetask\\frontend\\src\\components\\Logout.js",["59"],"C:\\Programming\\runetask\\frontend\\src\\components\\DeleteTask.js",[],["60","61"],"C:\\Programming\\runetask\\frontend\\src\\components\\CreateTask.js",[],"C:\\Programming\\runetask\\frontend\\src\\components\\Login.js",["62","63","64","65"],"C:\\Programming\\runetask\\frontend\\src\\components\\CompleteTask.js",["66"],"import React from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nconst CompleteTask = ({taskUrl, taskStatus, triggerToggle}) => {\r\n\r\n    const token = localStorage.getItem('token');\r\n\r\n    const config = {\r\n        method: 'put',\r\n        url: taskUrl,\r\n        headers: {\r\n            Authorization: 'Token ' + token \r\n        },\r\n        data: {\r\n            'completed': !taskStatus\r\n        }\r\n    }\r\n\r\n    const buttonStyle = {\r\n        textDecoration: 'line-through',\r\n    }\r\n\r\n    const handleComplete = () => {\r\n        return axios(config)\r\n            .then(res => {\r\n                console.log(JSON.stringify(res.data));\r\n                triggerToggle();\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {taskStatus ? \r\n                <button style={{textDecoration: 'line-through'}} onClick={handleComplete}>âœ“</button>\r\n                :\r\n                <button onClick={handleComplete}>âœ“</button>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CompleteTask;","C:\\Programming\\runetask\\frontend\\src\\components\\TwitchLogin.js",["67","68"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst TwitchLogin = ({ params, setToken, setMessage }) => {\r\n\r\n    // used for redirecting back to homepage after successful login\r\n    const history = useHistory();\r\n\r\n    // slices and returns code for backend code submission\r\n    const accessCode = params.location.pathname.slice(13, 43);\r\n\r\n    // used for POST request parameter in submitCode\r\n    const codeParams = {\r\n        'code': accessCode\r\n    }\r\n\r\n    // make POST request to backend with access code,\r\n    // get back key for auth, store in localStorage.\r\n    const submitCode = () => {\r\n        axios.post('http://localhost:8000/twitch/connect/', codeParams)\r\n        .then(res => {\r\n            console.log('putting token into locaStorage..');\r\n            let token = localStorage.setItem('token', res.data.key);\r\n            setToken(token);\r\n            setMessage(['Logged in successfully with Twitch!']);\r\n            history.push('/');\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    useEffect(() => {\r\n        submitCode();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TwitchLogin;","C:\\Programming\\runetask\\frontend\\src\\reportWebVitals.js",[],"C:\\Programming\\runetask\\frontend\\src\\components\\EditTask.js",["69"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nconst EditTask = ({ taskUrl, description, triggerToggle, setMsg }) => {\r\n\r\n    const [desc, setDesc] = useState(description);\r\n\r\n    const token = localStorage.getItem('token');\r\n    const config = {\r\n        method: 'put',\r\n        url: taskUrl,\r\n        headers: {\r\n            Authorization: 'Token ' + token\r\n        },\r\n        data: {\r\n            'description': desc\r\n        }\r\n    }\r\n\r\n    const keyPressHandler = (e) => {\r\n        if (token && e.key === 'Enter' && e.target.value.length > 0) {\r\n            e.preventDefault();\r\n            return axios(config)\r\n            .then(res => {\r\n                console.log(JSON.stringify(res.data));\r\n                setMsg('saved!');\r\n                triggerToggle();\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n        } else if (token && e.key === 'Enter' && e.target.value.length === 0) {\r\n            return setMsg('You must type at least one character.')\r\n        }\r\n        return console.log(` another key was pressed.`)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input type=\"text\" value={desc} onChange={e => setDesc(e.target.value)} onKeyPress={keyPressHandler}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditTask;","C:\\Programming\\runetask\\frontend\\src\\index.js",[],{"ruleId":"70","severity":1,"message":"71","line":27,"column":8,"nodeType":"72","endLine":27,"endColumn":18,"suggestions":"73"},{"ruleId":"70","severity":1,"message":"74","line":69,"column":8,"nodeType":"72","endLine":69,"endColumn":16,"suggestions":"75"},{"ruleId":"70","severity":1,"message":"76","line":51,"column":6,"nodeType":"72","endLine":51,"endColumn":13,"suggestions":"77"},{"ruleId":"78","severity":1,"message":"79","line":16,"column":13,"nodeType":"80","endLine":16,"endColumn":44},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":7,"column":22,"nodeType":"87","messageId":"88","endLine":7,"endColumn":33},{"ruleId":"85","severity":1,"message":"89","line":8,"column":22,"nodeType":"87","messageId":"88","endLine":8,"endColumn":33},{"ruleId":"85","severity":1,"message":"90","line":10,"column":11,"nodeType":"87","messageId":"88","endLine":10,"endColumn":28},{"ruleId":"85","severity":1,"message":"91","line":25,"column":17,"nodeType":"87","messageId":"88","endLine":25,"endColumn":25},{"ruleId":"85","severity":1,"message":"92","line":20,"column":11,"nodeType":"87","messageId":"88","endLine":20,"endColumn":22},{"ruleId":"85","severity":1,"message":"93","line":1,"column":17,"nodeType":"87","messageId":"88","endLine":1,"endColumn":25},{"ruleId":"70","severity":1,"message":"94","line":35,"column":8,"nodeType":"72","endLine":35,"endColumn":10,"suggestions":"95"},{"ruleId":"85","severity":1,"message":"96","line":1,"column":27,"nodeType":"87","messageId":"88","endLine":1,"endColumn":36},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.","ArrayExpression",["97"],"React Hook useEffect has a missing dependency: 'username.match.params.user'. Either include it or remove the dependency array.",["98"],"React Hook useEffect has a missing dependency: 'config'. Either include it or remove the dependency array.",["99"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'setUsername' is assigned a value but never used.","Identifier","unusedVar","'setPassword' is assigned a value but never used.","'handleLoginSubmit' is assigned a value but never used.","'authUser' is assigned a value but never used.","'buttonStyle' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'submitCode'. Either include it or remove the dependency array.",["102"],"'useEffect' is defined but never used.",{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},"no-global-assign","no-unsafe-negation",{"desc":"109","fix":"110"},"Update the dependencies array to be: [authUser, token]",{"range":"111","text":"112"},"Update the dependencies array to be: [toggle, username.match.params.user]",{"range":"113","text":"114"},"Update the dependencies array to be: [config, token]",{"range":"115","text":"116"},"Update the dependencies array to be: [submitCode]",{"range":"117","text":"118"},[701,711],"[authUser, token]",[2496,2504],"[toggle, username.match.params.user]",[1332,1339],"[config, token]",[1159,1161],"[submitCode]"]