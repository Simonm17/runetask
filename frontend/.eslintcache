[{"C:\\Programming\\runetask\\frontend\\src\\index.js":"1","C:\\Programming\\runetask\\frontend\\src\\components\\EditTask.js":"2","C:\\Programming\\runetask\\frontend\\src\\components\\DeleteTask.js":"3","C:\\Programming\\runetask\\frontend\\src\\components\\Logout.js":"4","C:\\Programming\\runetask\\frontend\\src\\pages\\User.js":"5","C:\\Programming\\runetask\\frontend\\src\\App.js":"6","C:\\Programming\\runetask\\frontend\\src\\components\\CreateTask.js":"7","C:\\Programming\\runetask\\frontend\\src\\components\\Login.js":"8","C:\\Programming\\runetask\\frontend\\src\\components\\TwitchLogin.js":"9","C:\\Programming\\runetask\\frontend\\src\\components\\Register.js":"10","C:\\Programming\\runetask\\frontend\\src\\components\\CompleteTask.js":"11"},{"size":500,"mtime":1606313686305,"results":"12","hashOfConfig":"13"},{"size":1323,"mtime":1608912463112,"results":"14","hashOfConfig":"13"},{"size":908,"mtime":1608911475945,"results":"15","hashOfConfig":"13"},{"size":429,"mtime":1609203370551,"results":"16","hashOfConfig":"13"},{"size":3672,"mtime":1609100655426,"results":"17","hashOfConfig":"13"},{"size":1616,"mtime":1609807019299,"results":"18","hashOfConfig":"13"},{"size":1386,"mtime":1608912333612,"results":"19","hashOfConfig":"13"},{"size":1737,"mtime":1609786101424,"results":"20","hashOfConfig":"13"},{"size":1141,"mtime":1609807280391,"results":"21","hashOfConfig":"13"},{"size":2782,"mtime":1609203370552,"results":"22","hashOfConfig":"13"},{"size":1077,"mtime":1608826532143,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"ievu0z",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},"C:\\Programming\\runetask\\frontend\\src\\index.js",[],["53","54"],"C:\\Programming\\runetask\\frontend\\src\\components\\EditTask.js",["55"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nconst EditTask = ({ taskUrl, description, triggerToggle, setMsg }) => {\r\n\r\n    const [desc, setDesc] = useState(description);\r\n\r\n    const token = localStorage.getItem('token');\r\n    const config = {\r\n        method: 'put',\r\n        url: taskUrl,\r\n        headers: {\r\n            Authorization: 'Token ' + token\r\n        },\r\n        data: {\r\n            'description': desc\r\n        }\r\n    }\r\n\r\n    const keyPressHandler = (e) => {\r\n        if (token && e.key === 'Enter' && e.target.value.length > 0) {\r\n            e.preventDefault();\r\n            return axios(config)\r\n            .then(res => {\r\n                console.log(JSON.stringify(res.data));\r\n                setMsg('saved!');\r\n                triggerToggle();\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n        } else if (token && e.key === 'Enter' && e.target.value.length === 0) {\r\n            return setMsg('You must type at least one character.')\r\n        }\r\n        return console.log(` another key was pressed.`)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input type=\"text\" value={desc} onChange={e => setDesc(e.target.value)} onKeyPress={keyPressHandler}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditTask;","C:\\Programming\\runetask\\frontend\\src\\components\\DeleteTask.js",[],"C:\\Programming\\runetask\\frontend\\src\\components\\Logout.js",[],["56","57"],"C:\\Programming\\runetask\\frontend\\src\\pages\\User.js",["58","59"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport CreateTask from '../components/CreateTask';\r\nimport EditTask from '../components/EditTask';\r\nimport DeleteTask from '../components/DeleteTask';\r\nimport CompleteTask from '../components/CompleteTask';\r\n\r\n\r\nconst UserPage = ({ username }) => {\r\n\r\n    const token = localStorage.getItem('token');\r\n\r\n    const [taskUrls, setTaskUrls] = useState([]);\r\n    const [tasks, setTasks] = useState([]);\r\n\r\n    const [msg, setMsg] = useState('');\r\n    \r\n    function clearMsg(){\r\n        return setMsg('');\r\n    }\r\n\r\n    // used for triggering getUserAPI() after CUD requests.\r\n    const [toggle, setToggle] = useState(true);\r\n    const triggerToggle = () => {\r\n        setToggle(!toggle);\r\n    }\r\n\r\n    // note: MAKE SURE USER IS AUTHENTICATED AND EQUALS OBJECT OWNER TO DISPLAY BUTTONS\r\n    // âœ“ button is a toggle; saves Task.completed field as true or false, indicated by regular or crossed-out text.\r\n    // x button is a toggle; it brings out the confirm & cancel buttons. Once clicked, x button disappears.\r\n    // confirm button triggers Task.delete() via post request.\r\n    // cancel button resets buttons and returns x button.\r\n\r\n    const getTaskInfo = tasks.map( task => {\r\n            if (token) {\r\n                return <li key={tasks.indexOf(task)}>\r\n                    <EditTask setMsg={setMsg} taskUrl={task.url} description={task.description} triggerToggle={triggerToggle}/> \r\n                    \r\n                    <CompleteTask taskUrl={task.url} taskStatus={task.completed} triggerToggle={triggerToggle}/><button>&times;</button>\r\n                    <DeleteTask setMsg={setMsg} taskUrl={task.url} triggerToggle={triggerToggle}/><button onClick={triggerToggle}>cancel</button>\r\n                </li> \r\n            }\r\n            else {\r\n                return <li key={tasks.indexOf(task)}>\r\n                    {task.description}\r\n                </li>\r\n            }\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n        const getUserAPI = () => {\r\n            axios.get(`http://localhost:8000/users/` + username.match.params.user)\r\n            .then(res => {\r\n                setTaskUrls(res.data.tasks);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        };\r\n        getUserAPI();\r\n    }, [toggle]);\r\n\r\n    useEffect(() => {\r\n        // Initialize with empty array so array doesn't\r\n        // merge on top of already added states when using setTasks.\r\n        console.log(`UseEffect triggered by taskUrls.`);\r\n        setTasks([]);\r\n        for (let i = 0; i < taskUrls.length; i++){\r\n            axios.get(taskUrls[i])\r\n            .then( res => {\r\n                console.log('PRINTING:');\r\n                console.log(res.data);\r\n                setTasks(prevTask => [...prevTask, res.data]);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        }\r\n    // only triggered when change in returned urls array by GET for users list.\r\n    }, [taskUrls]);\r\n\r\n    return (\r\n        <div>\r\n            {token? \r\n                <CreateTask setMsg={setMsg} triggerToggle={triggerToggle}/>\r\n                :\r\n                ''\r\n            }\r\n            <h1>{username.match.params.user}'s Profile</h1>\r\n            <h1></h1>\r\n            {msg? <p>{msg} <span onClick={clearMsg}>&times;</span></p> : ''}\r\n            {tasks.length > 0 ?\r\n                <ul> {getTaskInfo} </ul>\r\n                :\r\n                <p>{token ? 'You have no tasks! Click to add.' : 'No tasks added yet.'}</p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserPage;","C:\\Programming\\runetask\\frontend\\src\\App.js",["60","61","62","63"],"C:\\Programming\\runetask\\frontend\\src\\components\\CreateTask.js",[],"C:\\Programming\\runetask\\frontend\\src\\components\\Login.js",["64"],"import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nfunction Login({ setToken, setMessage }){\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const handleLoginSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const loginData = {\r\n            'username': username,\r\n            'password': password\r\n        };\r\n\r\n        axios.post('http://localhost:8000/dj-rest-auth/login/', loginData)\r\n        .then(res => {\r\n\r\n            let authToken = localStorage.setItem('token', res.data.key);\r\n            setToken(authToken);\r\n\r\n            // use username from local storage to use outside of url param handling\r\n            let authUser = localStorage.setItem('user', username);\r\n\r\n            setMessage([`Logged in as ${username}.`]);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            setMessage(`You have entered invalid username and/or password.`);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <form onSubmit={handleLoginSubmit}>\r\n\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"username\"\r\n                value={username}\r\n                onChange={e => setUsername(e.target.value)}\r\n            />\r\n\r\n            <input\r\n                type=\"password\"\r\n                placeholder=\"password\"\r\n                value={password}\r\n                onChange={e => setPassword(e.target.value)}\r\n            />\r\n\r\n            <input\r\n                type=\"submit\"\r\n                value=\"Login\"\r\n            />\r\n\r\n        </form>\r\n\r\n        <p>or</p>\r\n        <a href=\"http://localhost:8000/auth/login\">Login with Twitch</a>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login;","C:\\Programming\\runetask\\frontend\\src\\components\\TwitchLogin.js",["65","66"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst TwitchLogin = ({ params, setToken, setMessage }) => {\r\n\r\n    const history = useHistory();\r\n\r\n    // slices and returns code for backend code submission\r\n    const accessCode = params.location.pathname.slice(13, 43);\r\n\r\n    const codeParams = {\r\n        'code': accessCode\r\n    }\r\n\r\n    const submitCode = () => {\r\n        axios.post('http://localhost:8000/twitch/connect/', codeParams)\r\n        .then(res => {\r\n            console.log('putting token into locaStorage..');\r\n            let token = localStorage.setItem('token', res.data.key);\r\n            setToken(token);\r\n            setMessage(['Logged in successfully with Twitch!']);\r\n            history.push('/');\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log('params:');\r\n        console.log(params.location.pathname);\r\n        console.log(`code: ${accessCode}`);\r\n        submitCode();\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TwitchLogin;","C:\\Programming\\runetask\\frontend\\src\\components\\Register.js",[],"C:\\Programming\\runetask\\frontend\\src\\components\\CompleteTask.js",["67"],"import React from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nconst CompleteTask = ({taskUrl, taskStatus, triggerToggle}) => {\r\n\r\n    const token = localStorage.getItem('token');\r\n\r\n    const config = {\r\n        method: 'put',\r\n        url: taskUrl,\r\n        headers: {\r\n            Authorization: 'Token ' + token \r\n        },\r\n        data: {\r\n            'completed': !taskStatus\r\n        }\r\n    }\r\n\r\n    const buttonStyle = {\r\n        textDecoration: 'line-through',\r\n    }\r\n\r\n    const handleComplete = () => {\r\n        return axios(config)\r\n            .then(res => {\r\n                console.log(JSON.stringify(res.data));\r\n                triggerToggle();\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {taskStatus ? \r\n                <button style={{textDecoration: 'line-through'}} onClick={handleComplete}>âœ“</button>\r\n                :\r\n                <button onClick={handleComplete}>âœ“</button>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CompleteTask;",{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":1,"column":27,"nodeType":"74","messageId":"75","endLine":1,"endColumn":36},{"ruleId":"68","replacedBy":"76"},{"ruleId":"70","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":63,"column":8,"nodeType":"80","endLine":63,"endColumn":16,"suggestions":"81"},{"ruleId":"82","severity":1,"message":"83","line":92,"column":13,"nodeType":"84","endLine":92,"endColumn":17},{"ruleId":"72","severity":1,"message":"85","line":6,"column":3,"nodeType":"74","messageId":"75","endLine":6,"endColumn":7},{"ruleId":"72","severity":1,"message":"86","line":7,"column":3,"nodeType":"74","messageId":"75","endLine":7,"endColumn":16},{"ruleId":"72","severity":1,"message":"87","line":8,"column":3,"nodeType":"74","messageId":"75","endLine":8,"endColumn":12},{"ruleId":"72","severity":1,"message":"88","line":9,"column":3,"nodeType":"74","messageId":"75","endLine":9,"endColumn":14},{"ruleId":"72","severity":1,"message":"89","line":25,"column":17,"nodeType":"74","messageId":"75","endLine":25,"endColumn":25},{"ruleId":"72","severity":1,"message":"90","line":1,"column":17,"nodeType":"74","messageId":"75","endLine":1,"endColumn":25},{"ruleId":"78","severity":1,"message":"91","line":34,"column":8,"nodeType":"80","endLine":34,"endColumn":10,"suggestions":"92"},{"ruleId":"72","severity":1,"message":"93","line":20,"column":11,"nodeType":"74","messageId":"75","endLine":20,"endColumn":22},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar",["94"],["95"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'username.match.params.user'. Either include it or remove the dependency array.","ArrayExpression",["96"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'Link' is defined but never used.","'useRouteMatch' is defined but never used.","'useParams' is defined but never used.","'useLocation' is defined but never used.","'authUser' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'accessCode', 'params.location.pathname', and 'submitCode'. Either include them or remove the dependency array.",["97"],"'buttonStyle' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},"Update the dependencies array to be: [toggle, username.match.params.user]",{"range":"102","text":"103"},"Update the dependencies array to be: [accessCode, params.location.pathname, submitCode]",{"range":"104","text":"105"},[2351,2359],"[toggle, username.match.params.user]",[1053,1055],"[accessCode, params.location.pathname, submitCode]"]