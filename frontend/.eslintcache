[{"C:\\Programming\\runetask\\frontend\\src\\components\\Register.js":"1","C:\\Programming\\runetask\\frontend\\src\\pages\\User.js":"2","C:\\Programming\\runetask\\frontend\\src\\App.js":"3","C:\\Programming\\runetask\\frontend\\src\\components\\Logout.js":"4","C:\\Programming\\runetask\\frontend\\src\\components\\DeleteTask.js":"5","C:\\Programming\\runetask\\frontend\\src\\components\\CreateTask.js":"6","C:\\Programming\\runetask\\frontend\\src\\components\\Login.js":"7","C:\\Programming\\runetask\\frontend\\src\\components\\CompleteTask.js":"8","C:\\Programming\\runetask\\frontend\\src\\components\\TwitchLogin.js":"9","C:\\Programming\\runetask\\frontend\\src\\reportWebVitals.js":"10","C:\\Programming\\runetask\\frontend\\src\\components\\EditTask.js":"11","C:\\Programming\\runetask\\frontend\\src\\index.js":"12","C:\\Programming\\runetask\\frontend\\src\\urls.js":"13"},{"size":2782,"mtime":1609203370552,"results":"14","hashOfConfig":"15"},{"size":7893,"mtime":1611028168762,"results":"16","hashOfConfig":"15"},{"size":4039,"mtime":1611028168761,"results":"17","hashOfConfig":"15"},{"size":623,"mtime":1610252255843,"results":"18","hashOfConfig":"15"},{"size":1078,"mtime":1610866772503,"results":"19","hashOfConfig":"15"},{"size":3008,"mtime":1610866730196,"results":"20","hashOfConfig":"15"},{"size":1765,"mtime":1610861571570,"results":"21","hashOfConfig":"15"},{"size":1224,"mtime":1610866704256,"results":"22","hashOfConfig":"15"},{"size":1454,"mtime":1610865895727,"results":"23","hashOfConfig":"15"},{"size":362,"mtime":1606313686305,"results":"24","hashOfConfig":"15"},{"size":2192,"mtime":1610866814114,"results":"25","hashOfConfig":"15"},{"size":500,"mtime":1606313686305,"results":"26","hashOfConfig":"15"},{"size":207,"mtime":1611205385047,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ievu0z",{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Programming\\runetask\\frontend\\src\\components\\Register.js",[],"C:\\Programming\\runetask\\frontend\\src\\pages\\User.js",["61","62"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\nimport CreateTask from '../components/CreateTask';\r\nimport EditTask from '../components/EditTask';\r\nimport DeleteTask from '../components/DeleteTask';\r\nimport CompleteTask from '../components/CompleteTask';\r\nimport { motion } from 'framer-motion';\r\nimport { AnimateSharedLayout } from \"framer-motion\"\r\nimport { baseBackendUrl } from '../urls'; \r\n\r\n\r\nconst UserPage = ({ username, authUser }) => {\r\n\r\n    const token = localStorage.getItem('token');\r\n\r\n    const [taskUrls, setTaskUrls] = useState([]);\r\n    const [tasks, setTasks] = useState([]);\r\n\r\n    const [msg, setMsg] = useState('');\r\n    \r\n    function clearMsg(){\r\n        return setMsg('');\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (token == null) {\r\n            setMsg('');\r\n        }\r\n    }, [authUser]);\r\n\r\n    // used for triggering getUserAPI() after CUD requests.\r\n    const [toggle, setToggle] = useState(true);\r\n    const triggerToggle = () => {\r\n        setToggle(!toggle);\r\n    }\r\n\r\n    // for framer-motion animation for delete buttons\r\n    const [selectedBtn, setSelectedBtn] = useState('');\r\n\r\n    // for resetting state after canceling or deleting task/edits\r\n    function triggerSelectedBtn() {\r\n        setSelectedBtn('');\r\n    }\r\n\r\n    // FRAMER ANIMATION STUFF HERE\r\n    const variants = {\r\n        hidden: {scale: 0},\r\n        visible: {scale: 1},\r\n\r\n    }\r\n\r\n    const getTaskInfo = tasks.map( task => {\r\n            if (token && authUser === username.match.params.user) {\r\n                return <li key={tasks.indexOf(task)}>\r\n                    <EditTask completed={task.completed} setMsg={setMsg} taskUrl={task.url} description={task.description} triggerToggle={triggerToggle}/> \r\n                    <motion.div className=\"button-container\">\r\n                        <CompleteTask setMsg={setMsg} taskUrl={task.url} taskStatus={task.completed} triggerToggle={triggerToggle}/>\r\n                        <AnimateSharedLayout>\r\n                            <motion.button\r\n                                variants={variants}\r\n                                initial=\"visible\"\r\n                                animate={{ scale: selectedBtn === tasks.indexOf(task) ? '0' : '1'}}\r\n                                onClick={() => setSelectedBtn(tasks.indexOf(task))}\r\n                            >&times;</motion.button>\r\n                            {selectedBtn === tasks.indexOf(task) &&\r\n                                <motion.div\r\n                                    className=\"confirm-cancel-div\"\r\n                                    variants={variants}\r\n                                    initial={{ scale: 0, x: -45}}\r\n                                    animate={{ scale: selectedBtn === tasks.indexOf(task)? '1' : '0'}}\r\n                                    transition={{ ease: \"easeOut\", duration: 5 }}\r\n                                >\r\n                                    <DeleteTask setMsg={setMsg} taskUrl={task.url} triggerToggle={triggerToggle} setSelectedBtn={setSelectedBtn}/>\r\n                                    <motion.button onClick={triggerSelectedBtn}>cancel</motion.button>\r\n                                </motion.div>\r\n                            }\r\n                        </AnimateSharedLayout>\r\n                    </motion.div>\r\n                </li> \r\n            }\r\n            else {\r\n                return (\r\n                    <>\r\n                        {task.completed ?\r\n                            <li style={{textDecoration: 'line-through'}} key={tasks.indexOf(task)}>\r\n                            {task.description}\r\n                            </li>\r\n                            :\r\n                            <li key={tasks.indexOf(task)}>\r\n                                {task.description}\r\n                            </li>\r\n                        }\r\n                    </>\r\n                )\r\n            }\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n        const getUserAPI = async () => {\r\n            await axios.get(`${baseBackendUrl}/users/` + username.match.params.user)\r\n            .then(res => {\r\n                setTaskUrls(res.data.tasks);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        };\r\n        getUserAPI();\r\n    }, [toggle]);\r\n\r\n    useEffect(() => {\r\n        // Initialize with empty array so array doesn't\r\n        // merge on top of already added states when using setTasks.\r\n        console.log(`UseEffect triggered by taskUrls.`);\r\n        setTasks([]);\r\n        // defining async function and calling in useEffect to get tasks back in order\r\n        // or else tasks are returned unordered.\r\n        async function getTaskUrls() {\r\n            for (let i = 0; i < taskUrls.length; i++){\r\n                await axios.get(taskUrls[i])\r\n                .then( res => {\r\n                    console.log('PRINTING:');\r\n                    console.log(res.data);\r\n                    setTasks(prevTask => [...prevTask, res.data]);\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n            }\r\n        }\r\n        getTaskUrls();\r\n\r\n    // only triggered when change in returned urls array by GET for users list.\r\n    }, [taskUrls]);\r\n\r\n    return (\r\n        <User>\r\n            {username.match.params.user &&\r\n                <h1>{username.match.params.user}'s tasks</h1>\r\n            }\r\n            {msg && \r\n                <Messages>\r\n                    <p className=\"msg-text\">{msg} <span onClick={clearMsg}>&times;</span></p>\r\n                </Messages>\r\n            }\r\n            {token && authUser === username.match.params.user && \r\n                <CreateTask setMsg={setMsg} triggerToggle={triggerToggle}/>\r\n            }\r\n            {tasks.length > 0 ?\r\n                <TaskList>{getTaskInfo}</TaskList>\r\n                :\r\n                <p className=\"no-task\">{token && authUser === username.match.params.user ?\r\n                    'You have no tasks!' : `${username.match.params.user} currently has no task.`\r\n                    }\r\n                </p>\r\n            }\r\n        </User>\r\n    )\r\n}\r\n\r\nconst TaskList = styled.ul`\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    overflow-x: hidden;\r\n    max-width: 80%;\r\n    margin: auto;\r\n    list-style: none;\r\n    padding-inline-start: 0;\r\n    li {\r\n        border: 0;\r\n        outline: 0;\r\n        font-size: 16px;\r\n        margin: 10px auto;\r\n        padding: 16px;\r\n        background-color: #6441a5;\r\n        box-shadow: -5px -5px 20px #6441a5,  5px 5px 20px #523687;\r\n        transition: all 0.2s ease-in-out;\r\n        display: flex;\r\n        flex-flow: row wrap;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        .button-container {\r\n            display: flex;\r\n        }\r\n        .confirm-cancel-div {\r\n            display: flex;\r\n            flex-flow: row nowrap;\r\n        }\r\n    }\r\n`;\r\n\r\nconst User = styled.div`\r\n    h1, .no-task {\r\n        text-align: center;\r\n    }\r\n    button {\r\n        border: 0;\r\n        border-radius: 10px;\r\n        font-weight: bold;\r\n        outline: 0;\r\n        font-size: 16px;\r\n        margin: 6px 3px;\r\n        padding: 10px 15px;\r\n        background-color: #6441a5;\r\n        box-shadow:-5px -5px 20px #6441a5,  5px 5px 20px #523687;\r\n        transition: all 0.2s ease-in-out;\r\n        &:hover {\r\n            box-shadow: -2px -2px 5px #6441a5, 2px 2px 5px #523687;\r\n        }\r\n        &:active {\r\n            box-shadow: inset 1px 1px 2px #523687, inset -1px -1px 2px #6441a5;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Messages = styled.div`\r\n    .msg-text {\r\n        display: inline-block;\r\n        margin-left: 15vw;\r\n        span {\r\n            &:hover {\r\n                cursor: pointer;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default UserPage;","C:\\Programming\\runetask\\frontend\\src\\App.js",["63"],"C:\\Programming\\runetask\\frontend\\src\\components\\Logout.js",["64"],"import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSignOutAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Logout = ({ setToken, setMessage, setAuthUser }) => {\r\n    \r\n    const handleLogoutClick = () => {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n        setToken(null);\r\n        setMessage([`You have logged out.`]);\r\n        setAuthUser('');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <a onClick={handleLogoutClick}><FontAwesomeIcon icon={faSignOutAlt} /></a>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Logout;",["65","66"],"C:\\Programming\\runetask\\frontend\\src\\components\\DeleteTask.js",[],"C:\\Programming\\runetask\\frontend\\src\\components\\CreateTask.js",[],"C:\\Programming\\runetask\\frontend\\src\\components\\Login.js",["67","68","69","70"],"import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitch } from '@fortawesome/free-brands-svg-icons';\r\nimport styled from 'styled-components';\r\nimport { baseBackendUrl } from '../urls';\r\n\r\n\r\nfunction Login({ setToken, setMessage }){\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const handleLoginSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const loginData = {\r\n            'username': username,\r\n            'password': password\r\n        };\r\n\r\n        axios.post(`${baseBackendUrl}/dj-rest-auth/login/`, loginData)\r\n        .then(res => {\r\n\r\n            let authToken = localStorage.setItem('token', res.data.key);\r\n            setToken(authToken);\r\n\r\n            // use username from local storage to use outside of url param handling\r\n            let authUser = localStorage.setItem('user', username);\r\n\r\n            setMessage([`Logged in as ${username}.`]);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            setMessage(`You have entered invalid username and/or password.`);\r\n        });\r\n    }\r\n\r\n    const loginLink = `${baseBackendUrl}/auth/login`;\r\n\r\n    return (\r\n        <Button href={loginLink}>\r\n            <FontAwesomeIcon icon={faTwitch} /> Log In\r\n        </Button>\r\n    )\r\n}\r\n\r\n// Current a tag styling attributes are controlled by Nav styled component.\r\n// e.g. Button {text-decoration:none} won't work\r\n// because Nav controls text-decoration in its styling.\r\n// to modify Button, add classes in Nav to separate Button a-tag from rest of Nav.\r\nconst Button = styled.a`\r\n    svg {\r\n        color:  #6441a5;\r\n    }\r\n`;\r\n\r\nexport default Login;","C:\\Programming\\runetask\\frontend\\src\\components\\CompleteTask.js",["71"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst CompleteTask = ({taskUrl, taskStatus, triggerToggle, setMsg}) => {\r\n\r\n    const token = localStorage.getItem('token');\r\n\r\n    const config = {\r\n        method: 'put',\r\n        url: taskUrl,\r\n        headers: {\r\n            Authorization: 'Token ' + token \r\n        },\r\n        data: {\r\n            'completed': !taskStatus\r\n        }\r\n    }\r\n\r\n    const buttonStyle = {\r\n        textDecoration: 'line-through',\r\n    }\r\n\r\n    const handleComplete = () => {\r\n        return axios(config)\r\n            .then(res => {\r\n                console.log(JSON.stringify(res.data));\r\n                triggerToggle();\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                setMsg('An error occured. Please try again.');\r\n            });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {taskStatus?\r\n                <CompleteButton onClick={handleComplete}>!</CompleteButton>\r\n                :\r\n                <CompleteButton onClick={handleComplete}>✓</CompleteButton>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst CompleteButton = styled.button`\r\n\r\n`;\r\n\r\nexport default CompleteTask;","C:\\Programming\\runetask\\frontend\\src\\components\\TwitchLogin.js",["72","73"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { baseBackendUrl } from '../urls';\r\n\r\n\r\nconst TwitchLogin = ({ params, setToken, setMessage }) => {\r\n\r\n    // used for redirecting back to homepage after successful login\r\n    const history = useHistory();\r\n\r\n    // slices and returns code for backend code submission\r\n    const accessCode = params.location.pathname.slice(13, 43);\r\n\r\n    // used for POST request parameter in submitCode\r\n    const codeParams = {\r\n        'code': accessCode\r\n    }\r\n\r\n    // make POST request to backend with access code,\r\n    // get back key for auth, store in localStorage.\r\n    const submitCode = async () => {\r\n        setMessage(['Logging in with twitch...']);\r\n        await axios.post(`${baseBackendUrl}/twitch/connect/`, codeParams)\r\n        .then(res => {\r\n            console.log('putting token into locaStorage..');\r\n            let token = localStorage.setItem('token', res.data.key);\r\n            setToken(token);\r\n            setMessage(['Logged in successfully with Twitch!']);\r\n            history.push('/');\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            setMessage(['An error occured while connecting to the server.']);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        submitCode();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TwitchLogin;","C:\\Programming\\runetask\\frontend\\src\\reportWebVitals.js",[],"C:\\Programming\\runetask\\frontend\\src\\components\\EditTask.js",["74"],"C:\\Programming\\runetask\\frontend\\src\\index.js",[],["75","76"],"C:\\Programming\\runetask\\frontend\\src\\urls.js",[],{"ruleId":"77","severity":1,"message":"78","line":30,"column":8,"nodeType":"79","endLine":30,"endColumn":18,"suggestions":"80"},{"ruleId":"77","severity":1,"message":"81","line":111,"column":8,"nodeType":"79","endLine":111,"endColumn":16,"suggestions":"82"},{"ruleId":"77","severity":1,"message":"83","line":52,"column":6,"nodeType":"79","endLine":52,"endColumn":13,"suggestions":"84"},{"ruleId":"85","severity":1,"message":"86","line":17,"column":13,"nodeType":"87","endLine":17,"endColumn":44},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":11,"column":22,"nodeType":"94","messageId":"95","endLine":11,"endColumn":33},{"ruleId":"92","severity":1,"message":"96","line":12,"column":22,"nodeType":"94","messageId":"95","endLine":12,"endColumn":33},{"ruleId":"92","severity":1,"message":"97","line":14,"column":11,"nodeType":"94","messageId":"95","endLine":14,"endColumn":28},{"ruleId":"92","severity":1,"message":"98","line":29,"column":17,"nodeType":"94","messageId":"95","endLine":29,"endColumn":25},{"ruleId":"92","severity":1,"message":"99","line":21,"column":11,"nodeType":"94","messageId":"95","endLine":21,"endColumn":22},{"ruleId":"92","severity":1,"message":"100","line":1,"column":17,"nodeType":"94","messageId":"95","endLine":1,"endColumn":25},{"ruleId":"77","severity":1,"message":"101","line":40,"column":8,"nodeType":"79","endLine":40,"endColumn":10,"suggestions":"102"},{"ruleId":"92","severity":1,"message":"103","line":1,"column":27,"nodeType":"94","messageId":"95","endLine":1,"endColumn":36},{"ruleId":"88","replacedBy":"104"},{"ruleId":"90","replacedBy":"105"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.","ArrayExpression",["106"],"React Hook useEffect has a missing dependency: 'username.match.params.user'. Either include it or remove the dependency array.",["107"],"React Hook useEffect has a missing dependency: 'config'. Either include it or remove the dependency array.",["108"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'setUsername' is assigned a value but never used.","Identifier","unusedVar","'setPassword' is assigned a value but never used.","'handleLoginSubmit' is assigned a value but never used.","'authUser' is assigned a value but never used.","'buttonStyle' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'submitCode'. Either include it or remove the dependency array.",["111"],"'useEffect' is defined but never used.",["109"],["110"],{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},"no-global-assign","no-unsafe-negation",{"desc":"118","fix":"119"},"Update the dependencies array to be: [authUser, token]",{"range":"120","text":"121"},"Update the dependencies array to be: [toggle, username.match.params.user]",{"range":"122","text":"123"},"Update the dependencies array to be: [config, token]",{"range":"124","text":"125"},"Update the dependencies array to be: [submitCode]",{"range":"126","text":"127"},[878,888],"[authUser, token]",[4348,4356],"[toggle, username.match.params.user]",[1476,1483],"[config, token]",[1368,1370],"[submitCode]"]